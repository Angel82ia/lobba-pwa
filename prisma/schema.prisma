// LOBBA PWA Database Schema
// Based on technical specifications

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(CLIENT)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  accounts      Account[]
  sessions      Session[]
  designs       NailDesign[]
  orders        Order[]
  reviews       Review[]
  bookings      Booking[]
  salonProfile  SalonProfile?
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Nail Design System
model NailDesign {
  id          String      @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  category    DesignCategory
  tags        String[]
  isAIGenerated Boolean   @default(false)
  isPublic    Boolean     @default(true)
  likes       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  reviews     Review[]
  orderItems  OrderItem[]
  
  @@map("nail_designs")
}

// Salon Management
model SalonProfile {
  id          String    @id @default(cuid())
  name        String
  description String?
  address     String
  city        String
  country     String
  latitude    Float?
  longitude   Float?
  phone       String?
  website     String?
  instagram   String?
  rating      Float     @default(0)
  isVerified  Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  userId      String    @unique
  user        User      @relation(fields: [userId], references: [id])
  services    SalonService[]
  bookings    Booking[]
  
  @@map("salon_profiles")
}

model SalonService {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  duration    Int       // minutes
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  
  // Relations
  salonId     String
  salon       SalonProfile @relation(fields: [salonId], references: [id])
  bookings    Booking[]
  
  @@map("salon_services")
}

model Booking {
  id          String      @id @default(cuid())
  date        DateTime
  status      BookingStatus @default(PENDING)
  notes       String?
  totalPrice  Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  salonId     String
  salon       SalonProfile @relation(fields: [salonId], references: [id])
  serviceId   String
  service     SalonService @relation(fields: [serviceId], references: [id])
  
  @@map("bookings")
}

// E-commerce
model Product {
  id          String    @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    ProductCategory
  stock       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  orderItems  OrderItem[]
  
  @@map("products")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDING)
  totalAmount Float
  shippingAddress String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  quantity    Int
  price       Float
  
  // Relations
  orderId     String
  order       Order   @relation(fields: [orderId], references: [id])
  productId   String?
  product     Product? @relation(fields: [productId], references: [id])
  designId    String?
  design      NailDesign? @relation(fields: [designId], references: [id])
  
  @@map("order_items")
}

// Reviews and Community
model Review {
  id          String    @id @default(cuid())
  rating      Int       // 1-5
  comment     String?
  createdAt   DateTime  @default(now())
  
  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  designId    String?
  design      NailDesign? @relation(fields: [designId], references: [id])
  
  @@map("reviews")
}

// Enums
enum UserRole {
  CLIENT
  SALON
  ADMIN
}

enum DesignCategory {
  CLASSIC
  FRENCH
  GEOMETRIC
  FLORAL
  ABSTRACT
  SEASONAL
  WEDDING
  PARTY
}

enum ProductCategory {
  NAIL_POLISH
  TOOLS
  ACCESSORIES
  KITS
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}
